{
  "name": "Eval-lang",
  "tagline": "The eval Programming Language",
  "body": "# The **eval** Programming Language 1.0\r\n\r\n**eval** (*express(ive) versatile all-purpose language*) is a modern\r\ngeneral-purpose programming language with a focus on simplicity, safety and\r\nsoundness. **eval** is compiled to *JavaScript* which makes it a natural choice\r\nfor state of the art projects in the field of web technology.\r\n\r\n- **Statically Typed**\r\n\r\n  As opposed to many mainstream languages like Java, C#, C++, etc. for which\r\n  soundness of the type system cannot be proven, eval has a verifiably sound **and** complete\r\n  but yet flexible static type system, which is strictly more powerful than\r\n  Hindley-Milner type systems and features:\r\n\r\n  * Dependent types\r\n  * Linear types\r\n  * Intersection and Union types\r\n  * Existential types\r\n  * Gradual typing\r\n\r\n- **Object Oriented**\r\n\r\n  **eval** is a pure object oriented language, fulfilling all rules of object\r\n  oriented languages as defined by Alan Kay.\r\n\r\n- **Functional**\r\n\r\n  **eval** is purely functional. Functions are first class citizens. **eval**\r\n  features advanced functional concepts like\r\n\r\n  * Strict and lazy evaluation\r\n  * Ad-Hoc polymorphism through type classes\r\n  * Automatic derivation of all type classes\r\n  * Type signatures can include proof obligations which are checked by the compiler.\r\n\r\n## [Try **eval** online!!](https://martinring.github.io/eval-lang/tryEval.html)\r\n\r\n## Optimized Language Core\r\n\r\nWhat further differentiates **eval** from other mainstream languages, is that\r\nwe are able to maintain on par expressitivity and computational universality\r\nwhile optimizing the language core to eliminate declarations as well as type\r\nsignatures of all kinds.\r\n\r\n## Standard Library\r\n\r\nThe standard library defines four types\r\n\r\n  - `()` (Unit type)\r\n  - `String`,\r\n  - `α -> ⁠β` (Function type),\r\n  - `IO α` (Abstracts away side effects in the style of Haskell `IO`)\r\n\r\nAs well as three type classes `ApplicativeFunctor`, `Monad`, `Monoid`.\r\n\r\nIn addition there exists one object `eval` of type `String -> IO ()`. The\r\nfunction evaluates the provided String as a javascript program.\r\n\r\n## Eval is bootstrapped!\r\n\r\nThe **eval** compiler is completely written in **eval**. Bootstrapping a\r\ncompiler hase several advantages (Source: Wikipedia):\r\n\r\n- it is a non-trivial test of the language being compiled, and as such is a form of dogfooding.\r\n- compiler developers only need to know the language being compiled.\r\n- compiler development can be done in the higher level language being compiled.\r\n- improvements to the compiler's back-end improve not only general purpose programs but also the compiler itself.\r\n- it is a comprehensive consistency check as it should be able to reproduce its own object code.\r\n\r\nThanks to the\r\nexpressitivity of the **eval** programming language, the compiler consists of\r\njust *0.001 KLOC*. See `evalc.eval` to get an idea of advanced programming in eval.\r\n\r\n## Hello World\r\n\r\nHere comes the obligatory hello world example:\r\n\r\n    eval(\"alert('Hello World!')\")\r\n\r\n## Syntax\r\n\r\n**eval** syntax is actually quite simple and can be expressed by the following\r\nEBNF:\r\n\r\n    Program = Expression;\r\n    Expression = FunctionCall | Identifier | Literal;\r\n    FunctionCall = Expression, '(', Expression, ')';\r\n    Identifier = 'eval';\r\n    Literal = StringLiteral;\r\n    StringLiteral = '\"', { StringCharacter }, '\"';\r\n    StringCharacter = AnyCharacterExceptDoubleQuotes | '\\', '\"';\r\n\r\nWhitespace is not allowed in **eval** outside of string literals.\r\n\r\n## Type-Checker\r\n\r\nThanks to the optimized language core it is possible to implement the type\r\nchecking very efficiently in one phase together with the syntax analysis by\r\nallowing only correctly typed programs to be parsed.\r\n\r\nA top level expression has to be of type `IO ()`. There is only one expression\r\nwhich satisfies this type. Namely `eval(x)` where `x` is of type `String`. Only\r\nstring literals are of type `String` which boils down to the following regular\r\nexpression which does all the necessary name resolutions and type checks:\r\n\r\n    /eval\\(\"([^\"]|\\\\\")*\"\\)/\r\n\r\n\r\n## License\r\n\r\n**eval** is copyright 2016 by Martin Ring\r\n\r\nMIT License\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}